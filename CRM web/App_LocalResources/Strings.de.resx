<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Address" xml:space="preserve">
    <value>Adresse</value>
  </data>
  <data name="Attach" xml:space="preserve">
    <value>Anhängen</value>
  </data>
  <data name="Attachment" xml:space="preserve">
    <value>Anhang</value>
  </data>
  <data name="CaptionFileAlreadyExists" xml:space="preserve">
    <value>Datei existiert bereits</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Kategorie</value>
  </data>
  <data name="Cid" xml:space="preserve">
    <value>Cid</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>Stadt</value>
  </data>
  <data name="Cockpit" xml:space="preserve">
    <value>Cockpit</value>
  </data>
  <data name="Company" xml:space="preserve">
    <value>Firma</value>
  </data>
  <data name="ContractDate" xml:space="preserve">
    <value>Vertragsdatum</value>
  </data>
  <data name="ContractId" xml:space="preserve">
    <value>Vertrags-ID</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Land</value>
  </data>
  <data name="Customers" xml:space="preserve">
    <value>Kunden</value>
  </data>
  <data name="EditContactPerson" xml:space="preserve">
    <value>Kontaktperson bearbeiten</value>
  </data>
  <data name="EditCustomer" xml:space="preserve">
    <value>Kunde bearbeiten</value>
  </data>
  <data name="EditNote" xml:space="preserve">
    <value>Notiz bearbeiten</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Female" xml:space="preserve">
    <value>weiblich</value>
  </data>
  <data name="Forename" xml:space="preserve">
    <value>Vorname</value>
  </data>
  <data name="Gender" xml:space="preserve">
    <value>Geschlecht</value>
  </data>
  <data name="GoToListOfCustomers" xml:space="preserve">
    <value>Gehe zu Kundenliste</value>
  </data>
  <data name="GoToStart" xml:space="preserve">
    <value>Gehe zu Start</value>
  </data>
  <data name="HintFiltering" xml:space="preserve">
    <value>Linksclick auf Spaltenüberschrift um zu sortieren, Rechtsclick zum Filtern</value>
  </data>
  <data name="ListOfCustomers" xml:space="preserve">
    <value>Kundenliste</value>
  </data>
  <data name="MainContact" xml:space="preserve">
    <value>Hauptansprechpartner</value>
  </data>
  <data name="Male" xml:space="preserve">
    <value>männlich</value>
  </data>
  <data name="MsgConfigPathDoesNotExist" xml:space="preserve">
    <value>Pfad: {0} existiert nicht.\nBitte Ordner erstellen oder config.xml anpassen</value>
  </data>
  <data name="MsgFileAlreadyExists" xml:space="preserve">
    <value>Datei existiert bereits im Zielverzeichnis.\nSoll die existierende Datei ersetzt werden?</value>
  </data>
  <data name="MsgFileDoesNotExist" xml:space="preserve">
    <value>Datei existiert nicht unter diesem Pfad.</value>
  </data>
  <data name="MsgSelectCid" xml:space="preserve">
    <value>Bitte eine cid auswählen.</value>
  </data>
  <data name="MsgSelectContactPerson" xml:space="preserve">
    <value>Bitte eine Kontaktperson auswählen.</value>
  </data>
  <data name="MsgSelectCustomer" xml:space="preserve">
    <value>Bitte einen Kunden auswählen.</value>
  </data>
  <data name="MsgSelectNote" xml:space="preserve">
    <value>Bitte eine Notiz auswählen.</value>
  </data>
  <data name="MsgSelectRow" xml:space="preserve">
    <value>Bitte eine Zeile auswählen.</value>
  </data>
  <data name="NewContactPerson" xml:space="preserve">
    <value>Neue Kontaktperson</value>
  </data>
  <data name="NewCustomer" xml:space="preserve">
    <value>Neuer Kunde</value>
  </data>
  <data name="NewNote" xml:space="preserve">
    <value>Neue Notiz</value>
  </data>
  <data name="Note" xml:space="preserve">
    <value>Notiz</value>
  </data>
  <data name="OpenAttachment" xml:space="preserve">
    <value>Anhang öffnen</value>
  </data>
  <data name="OpenCustomerFolder" xml:space="preserve">
    <value>Kundenordner öffnen</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Telefon</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>Aktualisieren</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Entfernen</value>
  </data>
  <data name="ShowCustomerInCockpit" xml:space="preserve">
    <value>Kunde im Cockpit anzeigen</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Absenden</value>
  </data>
  <data name="Surname" xml:space="preserve">
    <value>Nachname</value>
  </data>
  <data name="Zip" xml:space="preserve">
    <value>PLZ</value>
  </data>
</root>